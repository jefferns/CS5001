{"ast":null,"code":"import { useState } from 'react';\nconst queryString = require('query-string');\nconst URL = 'https://api.spotify.com/v1';\nexport const getAvailableDevices = async token => {\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/get-a-users-available-devices\n  const response = await fetch(URL + '/me/player/devices', {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response;\n};\nexport const transferPlayback = async (token, device_id) => {\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/transfer-a-users-playback\n  const response = await fetch(URL + '/me/player', {\n    method: 'PUT',\n    body: `{\"device_ids\":[\"${device_id}\"]}`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response;\n};\nexport const searchSpotify = async function (token, type, query) {\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/search\n  const response = await fetch(URL + `/search?type=${type}&query=${query}&limit=${limit}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response;\n};\nexport const getTopItems = async function (token, type) {\n  let time_range = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'medium_term';\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-top-artists-and-tracks\n  // type === 'artists' | 'tracks'\n  // time_range === 'short_term' | 'medium_term' | 'long_term'\n  const response = await fetch(URL + `/me/top/${type}?limit=${limit}&time_range=${time_range}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response;\n};\nexport const getRecommendations = async (token, seeds, type) => {\n  // True if 'tracks' in seed type. This means [seeds] contains track items\n  const tracks = type.indexOf('track') > -1;\n  if (tracks) {\n    let query_url = 'seed_track=';\n    seeds.forEach(seed => {\n      LOG;\n    });\n  }\n  const response = await fetch(URL + `/recommendations?${track_url}${artist_url}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response;\n};","map":{"version":3,"names":["useState","queryString","require","URL","getAvailableDevices","token","response","fetch","method","headers","transferPlayback","device_id","body","searchSpotify","type","query","limit","getTopItems","time_range","getRecommendations","seeds","tracks","indexOf","query_url","forEach","seed","LOG","track_url","artist_url"],"sources":["C:/Users/Nick/Desktop/Fall 2022/CS5001/react-website/src/api.js"],"sourcesContent":["import { useState } from 'react';\r\nconst queryString = require('query-string');\r\n\r\n\r\nconst URL = 'https://api.spotify.com/v1';\r\n\r\nexport const getAvailableDevices = async (token) => {\r\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/get-a-users-available-devices\r\n  const response = await fetch(URL + '/me/player/devices', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer ' + token,\r\n      'Content-Type': 'application/json',\r\n    }\r\n  });\r\n  return response;\r\n};\r\n\r\nexport const transferPlayback = async (token, device_id) => {\r\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/transfer-a-users-playback\r\n  const response = await fetch(URL + '/me/player', {\r\n    method: 'PUT',\r\n    body: `{\"device_ids\":[\"${device_id}\"]}`,\r\n    headers: {\r\n      'Authorization': 'Bearer ' + token,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  return response;\r\n};\r\n\r\nexport const searchSpotify = async (token, type, query, limit=10) => {\r\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/search\r\n  const response = await fetch(URL + `/search?type=${type}&query=${query}&limit=${limit}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer ' + token,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  return response;\r\n}\r\n\r\nexport const getTopItems = async (token, type, time_range='medium_term', limit=5) => {\r\n  //https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-top-artists-and-tracks\r\n  // type === 'artists' | 'tracks'\r\n  // time_range === 'short_term' | 'medium_term' | 'long_term'\r\n  const response = await fetch(URL + `/me/top/${type}?limit=${limit}&time_range=${time_range}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer ' + token,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  return response;\r\n}\r\n\r\nexport const getRecommendations = async (token, seeds, type) => {\r\n  // True if 'tracks' in seed type. This means [seeds] contains track items\r\n  const tracks = type.indexOf('track') > -1;\r\n  if (tracks){\r\n    let query_url = 'seed_track=';\r\n    seeds.forEach(seed => {\r\n      LOG\r\n    });\r\n  }\r\n  \r\n  const response = await fetch(URL+`/recommendations?${track_url}${artist_url}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer ' + token,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n  return response;\r\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAG3C,MAAMC,GAAG,GAAG,4BAA4B;AAExC,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,KAAK,IAAK;EAClD;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,oBAAoB,EAAE;IACvDK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,SAAS,GAAGJ,KAAK;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOC,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAG,OAAOL,KAAK,EAAEM,SAAS,KAAK;EAC1D;EACA,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAG,YAAY,EAAE;IAC/CK,MAAM,EAAE,KAAK;IACbI,IAAI,EAAG,mBAAkBD,SAAU,KAAI;IACvCF,OAAO,EAAE;MACP,eAAe,EAAE,SAAS,GAAGJ,KAAK;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOC,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMO,aAAa,GAAG,gBAAOR,KAAK,EAAES,IAAI,EAAEC,KAAK,EAAe;EAAA,IAAbC,KAAK,uEAAC,EAAE;EAC9D;EACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAI,gBAAeW,IAAK,UAASC,KAAM,UAASC,KAAM,EAAC,EAAE;IACvFR,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,SAAS,GAAGJ,KAAK;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOC,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMW,WAAW,GAAG,gBAAOZ,KAAK,EAAES,IAAI,EAAwC;EAAA,IAAtCI,UAAU,uEAAC,aAAa;EAAA,IAAEF,KAAK,uEAAC,CAAC;EAC9E;EACA;EACA;EACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAI,WAAUW,IAAK,UAASE,KAAM,eAAcE,UAAW,EAAC,EAAE;IAC5FV,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,SAAS,GAAGJ,KAAK;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOC,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMa,kBAAkB,GAAG,OAAOd,KAAK,EAAEe,KAAK,EAAEN,IAAI,KAAK;EAC9D;EACA,MAAMO,MAAM,GAAGP,IAAI,CAACQ,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;EACzC,IAAID,MAAM,EAAC;IACT,IAAIE,SAAS,GAAG,aAAa;IAC7BH,KAAK,CAACI,OAAO,CAACC,IAAI,IAAI;MACpBC,GAAG;IACL,CAAC,CAAC;EACJ;EAEA,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAE,oBAAmBwB,SAAU,GAAEC,UAAW,EAAC,EAAE;IAC7EpB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,SAAS,GAAGJ,KAAK;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOC,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module"}